<!-- resources/sakai_create_uploads.vm, use with org.sakaiproject.tool.content.ResourcesHelperAction.java -->
#set($DOT = ".")
<div class="portletBody">
	<h4>
		$tlang.getString("create.uploads")
	</h4>
	#if ($itemAlertMessage)
		<div class="alertMessage">$tlang.getString("label.alert") $validator.escapeHtml($itemAlertMessage)</div>
		<div style="display:block;clear:both" ></div>
	#end
	<p class="instr">
		$tlang.getString("instr.upload")
	</p>
	<div class="breadCrumb">
		$tlang.getString("gen.location")
		##<img src = "#imageLink($contentTypeImageService.getContentTypeImage("folder"))" border="0"  alt="folder" />
		#foreach ($folder in $model.collectionPath)
			$folder.name /
		#end
	</div>
	<form name="addContentForm" id="addContentForm" method="post" action="#toolForm("ResourcesHelperAction")"  enctype="multipart/form-data">
		<input type="hidden" name="fileCount" id="fileCount" value="$pipes.size()" />
		<input type="hidden" name="lastIndex" id="lastIndex" value="$pipes.size()" />
		<div id="fileInputDiv">
			#set($i = 0)
			#foreach($pipe in $pipes)
				
				#set($prev = $i)
				#set($i = $i + 1)
				#set($next = $i + 1)
				
				<div id="contentDiv${DOT}$i" class="highlightPanel">
					<input type="hidden" name="exists${DOT}$i" id="exists${DOT}$i" value="true" />
					<p class="shorttext">
						<label for="content${DOT}$i">$tlang.getString("label.upload")</label>
						## TODO add onchange event handler to seed file-name into displayName field
						<input type="file" name="content${DOT}$i" id="content${DOT}$i" class="upload" />
						<a class="indnt2" href="#" id="propsTrigger${DOT}$i">$tlang.getString("edit.show")</a>
						<a class="indnt2" href="#" id="removeTrigger${DOT}$i" >
							<img src="#imageLink("sakai/cross.png")" title="$tlang.getString("edit.remove")" />
						</a>
					</p>
					<input type="hidden" id="prev${DOT}$i" name="prev${DOT}$i" value="#if($i > 1)${prev}#end" />
					<input type="hidden" id="next${DOT}$i" name="next${DOT}$i" value="#if($i < $pipes.size())${next}#end" />
				</div>
				<div id="propertiesDiv${DOT}$i" style="display:none;">
					## displayName
					#parse("/vm/resources/sakai_properties.vm")
					<hr class="itemSeparator" />
				</div>
			#end
		</div>
		<p class="act">
			<a href="#" onclick="javascript:addFileInput();">$tlang.getString("label.addfile")</a>
		</p>
		#if ($model.resourceTypeDef.hasNotificationDialog())
			<p class="shorttext">
				<label for="notify$i">
					$tlang.getString("noti.label")
				</label>	
				<select name="notify$i" id="notify$i">
					<option value="r">$tlang.getString("noti.all")</option>
					<option value="o">$tlang.getString("noti.limited")</option>
					<option value="n" selected="selected">$tlang.getString("noti.none")</option>
				</select>
			</p>	
		#end
		
		<p class="act">
			<input type="button" class="active" name="savechanges" id="saveChanges" onclick="javascript:showNotif('submitnotif','saveChanges','addContentForm');document.getElementById('addContentForm').action='#toolLink("ResourcesHelperAction" "doUpload")&flow=save';submitform('addContentForm');" value="$tlang.getString("label.finupl")" accesskey="s" />
			<input type="button" name="cancel" onclick="javascript:document.getElementById('addContentForm').action='#toolLink("ResourcesHelperAction" "doCancel")';submitform('addContentForm');" value="$tlang.getString("label.cancel")" accesskey="x" />
			<span id="submitnotif" style="visibility:hidden">$tlang.getString("label.proces")</span>
		</p>
	</form>
</div>
<script type="text/javascript" language="JavaScript">
	<!--
	var DOT = "$DOT";
	function submitform(id)
	{
		var theForm = document.getElementById(id);
		if(theForm && theForm.onsubmit)
		{
			theForm.onsubmit();
		}
		if(theForm && theForm.submit)
		{
			theForm.submit();
		}
	}
	function addFileInput()
	{
		var counter = document.getElementById("fileCount");
		var indexer = document.getElementById("lastIndex");
		var fileInputDiv = document.getElementById("fileInputDiv");
		var count = new Number(counter.value) + 1;
		counter.value = count;
		var prevIndex = indexer.value;
		var index = new Number(indexer.value) + 1;
		indexer.value = index;

		var modelContentDiv = document.getElementById("contentDiv" + DOT + prevIndex);
		if(modelContentDiv)
		{
			var newContentDiv = deepCopy(modelContentDiv, index);
			fileInputDiv.appendChild(newContentDiv);
		}
		
		var modelPropertiesDiv = document.getElementById("propertiesDiv" + DOT + prevIndex);
		if(modelPropertiesDiv)
		{
			var newPropertiesDiv = deepCopy(modelPropertiesDiv, index);
			fileInputDiv.appendChild(newPropertiesDiv);
		}
		
		var prevNext = document.getElementById("next" + prevIndex);
		if(prevNext && prevNext.value)
		{
			prevNext.value = index;
		}
		
		attachEventHandlers();
		setMainFrameHeight(window.name);
		focus_path = [ "content" + DOT + index ];
		setFocus(focus_path);
	}
	function removeFileItem(index)
	{
		var fileInputDiv = document.getElementById("fileInputDiv");
		var prev = document.getElementById("prev" + DOT + index);
		var next = document.getElementById("next" + DOT + index);
		
		
		if(prev && prev.value && next && next.value )
		{
			if(prev.value == "")
			{
				if(next.value == "")
				{
					// can't delete
					return;
				}
				else
				{
					var nextPrev = document.getElementById("prev" + DOT + next.value);
					if(nextPrev)
					{
						nextPrev = "";
					}
				}
			}
			else if(next.value == "")
			{
				var prevNext = document.getElementById("next" + DOT + prev.value);
				if(prevNext)
				{
					prevNext = "";
				}
			}
			else
			{
				var nextPrev = document.getElementById("prev" + DOT + next.value);
				if(nextPrev)
				{
					nextPrev = prev.value;
				}
				var prevNext = document.getElementById("next" + DOT + prev.value);
				if(prevNext)
				{
					prevNext = next.value;
				}
			}
		}
		
		var counter = document.getElementById("fileCount");
		var count = new Number(counter.value) - 1;
		counter.value = count;

		var indexer = document.getElementById("lastIndex");
		if(indexer.value == index)
		{
			indexer.value = prev.value;
		}
		
		var fileInputDiv = document.getElementById("fileInputDiv");
		
		var contentDiv = document.getElementById("contentDiv" + DOT + index);
		if(contentDiv)
		{
			removeTree(contentDiv);
			fileInputDiv.removeChild(contentDiv);
		}
		var propertiesDiv = document.getElementById("propertiesDiv" + DOT + index);
		if(propertiesDiv)
		{
			removeTree(propertiesDiv);
			fileInputDiv.removeChild(propertiesDiv);
		}
		
		setMainFrameHeight(window.name);
	}
	function removeTree(nodeRef)
	{
		if(nodeRef && nodeRef.childNodes && nodeRef.childNodes.length && nodeRef.childNodes.length > 0)
		{
			for(var i = 0; i < nodeRef.childNodes.length; i++)
			{
				removeTree(nodeRef.childNodes[i]);
				nodeRef.removeChild(nodeRef.childNodes[i]);
			}
		}
	}
	function handleRemoveFileItem(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			var elem = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(elem)
			{
				elem = (elem.nodeType == 1 || elem.nodeType == 9) ? elem : elem.parentNode;
				deleteFileItem(elem);
			}
		}
	}
	function deleteFileItem(element)
	{
		if(element && element.id)
		{
			var dot = element.id.lastIndexOf(DOT);
			if(dot >= 0)
			{
				var index = element.id.substr(dot + 1);
				removeFileItem(index);
			}
		}
		else if(element.parentNode != null && element.parentNode != element)
		{
			deleteFileItem(element.parentNode);
		}
	}
	function toggleProperties(element)
	{
		if(element)
		{
			if(element.id)
			{
				var dot = element.id.lastIndexOf(DOT);
				if(dot >= 0)
				{
					var index = element.id.substr(dot + 1);
					showHide(element, index);
				}
			}
		}
	}
	function togglePropertiesDiv(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			evt.cancelBubble = true;
			var elem = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(elem)
			{
				elem = (elem.nodeType == 1 || elem.nodeType == 9) ? elem : elem.parentNode;
				
				toggleProperties(elem);
			}
		}
	}
	function showHide(element, index)
	{
		var propertiesDiv = document.getElementById("propertiesDiv" + DOT + index);
		
		if(propertiesDiv)
		{
			var display = propertiesDiv.style.display;
			if(display && display == "none")
			{
				propertiesDiv.style.display = "block";
				removeTextNodes(element);
				var newText = document.createTextNode("$tlang.getString("edit.hide")");
				element.appendChild(newText);
				focus_path = [ "content" + DOT + index ];
			}
			else
			{
				propertiesDiv.style.display = "none";
				removeTextNodes(element);
				var newText = document.createTextNode("$tlang.getString("edit.show")");
				element.appendChild(newText);
				focus_path = [ "description" + DOT + index ];
			}
			setMainFrameHeight(window.name);
			setFocus(focus_path);
		}
	}
	function removeTextNodes(element)
	{
		for(var i = element.childNodes.length - 1; i >= 0; i--)
		{
			if(element.childNodes[i].nodeType == 3 || element.childNodes[i].nodeType == 4)
			{
				element.removeChild(element.childNodes[i]);
			}
		}
	}
	function deepCopy(element, index)
	{
		var newElement = element.cloneNode(false);
		if(newElement && newElement.id)
		{
			if(element.id.match(/^content${DOT}\d+$/))
			{
				newElement = document.createElement(element.tagName);
				for(var a = 0; a < element.attributes.length; a++)
				{
					if(element.attributes[a].name == "value" || element.attributes[a].name == "type")
					{
						// skip
					}
					else 
					{
						try
						{
							newElement.setAttributeNode(element.attributes[a]);
						}
						catch(e)
						{
							// ignore
						}
					}
				}
				if(element.type !== null && element.type != newElement.type)
				{
					try
					{
						newElement.setAttribute("type", element.type);
					}
					catch(e)
					{
						// ignore
					}
				}
			}
			var dotPos = element.id.lastIndexOf(DOT);
			if(dotPos >= 0)
			{
				var baseName = element.id.substr(0,dotPos);
				newElement.setAttribute("id", baseName + DOT + index);
				newElement.setAttribute("name", baseName + DOT + index);
			}
		}
		if(newElement && newElement.htmlFor)
		{
			var dotPos = newElement.htmlFor.lastIndexOf(DOT);
			if(dotPos >= 0)
			{
				var baseName = newElement.htmlFor.substr(0,dotPos);
				newElement.htmlFor = baseName + DOT + index;
			}
		}
		if(newElement && element.childNodes)
		{
			for(var i = 0; i < element.childNodes.length; i++)
			{
				var newChild = deepCopy(element.childNodes[i], index);
				newElement.appendChild(newChild);
			}
		}
		
		return newElement
	}
	function attachEventHandlers()
	{
		for(var i = 0; i < document.links.length; i++)
		{
			var link = document.links[i];
			if(link.id)
			{
				if(link.id.match(/^propsTrigger${DOT}\d+$/))
				{
					if(link.attachEvent)
					{
						link.attachEvent("onclick", togglePropertiesDiv);
					}
					else if(link.addEventListener)
					{
						link.addEventListener("click", togglePropertiesDiv, true);
					}
				}
				else if(link.id.match(/^removeTrigger${DOT}\d+$/))
				{
					if(link.attachEvent)
					{
						link.attachEvent("onclick", handleRemoveFileItem);
					}
					else if(link.addEventListener)
					{
						link.addEventListener("click", handleRemoveFileItem, true);
					}
				}
			}
		}
	}
	attachEventHandlers();
	-->
</script>
